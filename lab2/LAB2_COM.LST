Turbo Assembler	 Version 2.51	     12/14/23 19:07:09	    Page 1
lab2_com.asm



      1				     ;пересылка слов(W) из in_str в out_str 21-ВМз-4	07/12/2023
      2				     ;слова, не равные '01' ~ 3031h, '23' ~ 3233h,	'45' ~ 3435h
      3
      4	0000			     .model tiny  ; Устанавливает модель памяти, где весь код и +
      5				     данные помещаются в одном 64KB сегменте.
      6
      7	0000			     .code
      8				     ORG 100h ;	COM-программы начинаются с этой	точки
      9	0100			     start:
     10				     ; приглашение ввода:
     11	0100  BA 0154r			     mov dx,offset mess1  ; Загружаем смещение	строки mess1 в	    +
     12				     регистр DX
     13	0103  B4 09			     mov ah,9		  ; Устанавливаем 9 в регистр AH для	    +
     14				     функции "вывод	строки" в прерывании DOS 21h
     15	0105  CD 21			     int 21h		  ; Вызываем прерывание DOS 21h, выводя	    +
     16				     строку mess1	на экран
     17
     18				     ; ввод:
     19	0107  BA 017Cr			     mov dx,offset in_str ; Загружаем смещение	строки in_str в	    +
     20				     регистр DX
     21	010A  C7 06 017Cr 0010		     mov in_str, 16	  ; Записываем 16 в первый байт in_str,	    +
     22				     ограничивая ввод 16	байтами
     23	0110  B4 0A			     mov ah,10		  ; Устанавливаем 10 в регистр AH для	    +
     24				     функции "buffered input" в	прерывании DOS 21h
     25	0112  CD 21			     int 21h		  ; Вызываем прерывание DOS 21h, читая	    +
     26				     введенные	данные в	буфер in_str
     27
     28				     ;основная часть (модифицированный код из	ЛР1):
     29	0114  BE 017Er				     mov si,offset in_str+2 ; первые 2 байта	служебные
     30	0117  BF 01A8r				     mov di,offset out_str
     31	011A  8B 0E 017Dr			     mov cx,in_str+1 ; помещаем	в cx количество		    +
     32				     введенных	байт символов + первый символ в старший	    +
     33				     байт
     34	011E  32 ED			     xor ch, ch	     ; очистка старшего байта
     35	0120  D1 E9			     shr cx, 1	     ; сдвиг вправо (целочисленное деление   +
     36				     на 2)
     37	0122			     cmp_cycle:
     38	0122  8B 04			     mov ax,[si]  ; помещаем первое считанное слово	в ax	    +
     39				     (байты переставлены)
     40	0124  3D 3130				     cmp ax,3130h ; 3031h ~ '01'
     41	0127  74 0F				     je	cmp_true  ; если равно	- пропуск
     42	0129  3D 3332				     cmp ax,3332h ; 3233h ~ '23'
     43	012C  74 0A				     je	cmp_true  ; если равно	- пропуск
     44	012E  3D 3534				     cmp ax,3534h ; 3435h ~ '45'
     45	0131  74 05				     je	cmp_true  ; если равно	- пропуск
     46	0133  89 05				     mov [di], ax ; запись в выходной массив
     47	0135  83 C7 02				     add di, 2	  ; увеличиваем выходной указатель на +
     48				     2 (работаем со словами)
     49	0138			     cmp_true:
     50	0138  83 C6 02			     add si, 2	  ; увеличиваем входной указатель на 2	    +
     51				     (работаем со словами)
     52	013B  E2 E5				     loop cmp_cycle ; пока регистр счетчика не равен 0    +
     53				     выполняем	цикл cmp_cycle
     54
     55				     ; вывод результата:
     56	013D  BA 0170r			 mov dx,offset mess2  ;	Загружаем смещение строки mess2 в	    +
     57				     регистр DX
Turbo Assembler	 Version 2.51	     12/14/23 19:07:09	    Page 2
lab2_com.asm



     58	0140  B4 09			 mov ah,9  ; Загружаем	9 в регистр AH,	что соответствует   +
     59				     функции "вывод	строки" в прерывании DOS 21h
     60	0142  CD 21			 int 21h   ; Вызываем DOS interrupt 21h, что	выводит строку mess2   +
     61				     на экран
     62
     63	0144  BA 01A8r			 mov dx,offset out_str	; Загружаем смещение строки out_str в	    +
     64				     регистр DX
     65	0147  B4 09			 mov ah,9  ; Загружаем	9 в регистр AH,	что соответствует   +
     66				     функции "вывод	строки" в прерывании DOS 21h
     67	0149  CD 21			 int 21h   ; Вызываем DOS interrupt 21h, что	выводит строку out_str +
     68				     на экран
     69
     70				     ; задержка	(ожидание нажатия клавиши):
     71	014B  B4 07			 mov ah,7  ; Устанавливаем	7 в AH, что	соответствует	    +
     72				     функции "ввод без эха" в	прерывании DOS 21h
     73	014D  CD 21			 int 21h   ; Вызываем DOS interrupt 21h, что	позволяет		    +
     74				     программе	ожидать нажатия клавиши пользователем
     75
     76				     ; завершение:
     77	014F  B8 4C00			 mov ax,4c00h  ; Загружаем 4C00h в AX, что	соответствует	    +
     78				     функции "завершение программы" в прерывании DOS 21h
     79	0152  CD 21			 int 21h   ; Вызываем прерывание DOS 21h, что приводит к	    +
     80				     завершению программы
     81
     82					 ; Объявляем строку mess1, которая содержит текст,	    +
     83				     символы перевода строки (10) и возврата каретки (13),
     84					 ;и заканчивается	символом '$'
     85	0154  32 31 5F 76 6D 7A	5F+	 mess1 db '21_vmz_4|A_Khaleev Input:',10,13,'$'
     86	      34 7C 41 5F 4B 68	61+
     87	      6C 65 65 76 20 49	6E+
     88	      70 75 74 3A 0A 0D	24
     89
     90					 ; Объявляем строку mess2, которая начинается с	    +
     91				     символов перевода строки (10) и возврата каретки (13),
     92					 ;содержит текст 'Output:', затем еще символы перевода  +
     93				     строки и возврата каретки, и заканчивается символом+
     94				     '$'
     95	0170  0A 0D 4F 75 74 70	75+	 mess2 db 10,13,'Output:',10,13,'$'
     96	      74 3A 0A 0D 24
     97
     98					 ; Объявляем массив in_str  - выделяется			    +
     99				     неинициализированная память размером 22 байта
    100	017C  16*(????)			 in_str	dw 22 dup (?)
    101
    102					 ; Объявляем массив out_str, состоящий из 22 элементов,  +
    103				     каждый из которых инициализируется символом	'$'
    104	01A8  16*(0024)			 out_str dw 22 dup ('$')
    105
    106					 ; в ассемблере строка	заканчивается символом '$'.    +
    107				     Это позволяет функциям	ввода/вывода	DOS распознавать+
    108				     конец	строки
    109
    110				     end start
Turbo Assembler	 Version 2.51	     12/14/23 19:07:09	    Page 3
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "12/14/23"
??FILENAME			  Text	 "lab2_com"
??TIME				  Text	 "19:07:09"
??VERSION			  Number 0205
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 LAB2_COM
@MODEL				  Text	 1
@WORDSIZE			  Text	 2
CMP_CYCLE			  Near	 DGROUP:0122
CMP_TRUE			  Near	 DGROUP:0138
IN_STR				  Word	 DGROUP:017C
MESS1				  Byte	 DGROUP:0154
MESS2				  Byte	 DGROUP:0170
OUT_STR				  Word	 DGROUP:01A8
START				  Near	 DGROUP:0100

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  01D4 Word	  Public  CODE
